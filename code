import React, { useState, useEffect } from 'react';
import { PieChart, Pie, Cell, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';
import { 
  Wheat, 
  Sprout, 
  Battery, 
  Droplets, 
  Zap, 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  Search,
  Navigation,
  Activity,
  BarChart3,
  Database,
  Bell
} from 'lucide-react';

const PesticideManagementDashboard = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [searchTerm, setSearchTerm] = useState('');
  
  // Mock data that updates dynamically
  const [dashboardData, setDashboardData] = useState({
    fieldStats: {
      totalPlants: 2500,
      healthy: 1875,
      atRisk: 425,
      critical: 200
    },
    todayActivity: {
      sprayingMissions: 12,
      areaTreated: 45.2,
      detectionScans: 156,
      pesticideUsed: 78.5
    },
    droneStatus: {
      battery: 85,
      charging: false,
      tankCapacity: 65,
      missionProgress: 78,
      ready: true
    }
  });

  const [trendData, setTrendData] = useState([
    { day: 'Mon', infectionRate: 12, treatmentSuccess: 88 },
    { day: 'Tue', infectionRate: 15, treatmentSuccess: 85 },
    { day: 'Wed', infectionRate: 18, treatmentSuccess: 82 },
    { day: 'Thu', infectionRate: 14, treatmentSuccess: 89 },
    { day: 'Fri', infectionRate: 16, treatmentSuccess: 87 },
    { day: 'Sat', infectionRate: 13, treatmentSuccess: 91 },
    { day: 'Sun', infectionRate: 11, treatmentSuccess: 93 }
  ]);

  const plantDatabase = [
    { id: 1, crop: 'Corn', icon: '🌽', count: 800, healthy: 620, atRisk: 120, critical: 60, disease: 'Corn Borer', treatment: 'Bt Spray' },
    { id: 2, crop: 'Tomato', icon: '🍅', count: 600, healthy: 480, atRisk: 80, critical: 40, disease: 'Blight', treatment: 'Copper Fungicide' },
    { id: 3, crop: 'Wheat', icon: '🌾', count: 500, healthy: 375, atRisk: 100, critical: 25, disease: 'Rust', treatment: 'Triazole' },
    { id: 4, crop: 'Potato', icon: '🥔', count: 400, healthy: 280, atRisk: 80, critical: 40, disease: 'Late Blight', treatment: 'Mancozeb' },
    { id: 5, crop: 'Soybean', icon: '🫘', count: 200, healthy: 120, atRisk: 45, critical: 35, disease: 'Pod Borer', treatment: 'Neem Oil' }
  ];

  const alerts = [
    { id: 1, type: 'critical', message: 'Critical blight outbreak detected in Sector 7', time: '5 min ago' },
    { id: 2, type: 'warning', message: 'Drone battery low - 15% remaining', time: '12 min ago' },
    { id: 3, type: 'info', message: 'Spraying mission completed in Sector 3', time: '1 hour ago' },
    { id: 4, type: 'warning', message: 'Pesticide tank needs refill - 20% capacity', time: '2 hours ago' }
  ];

  // Simulate data updates
  useEffect(() => {
    const interval = setInterval(() => {
      setDashboardData(prev => ({
        ...prev,
        droneStatus: {
          ...prev.droneStatus,
          battery: Math.max(10, prev.droneStatus.battery + (Math.random() - 0.5) * 2),
          missionProgress: Math.min(100, Math.max(0, prev.droneStatus.missionProgress + (Math.random() - 0.3) * 5))
        }
      }));
      
      setTrendData(prev => prev.map(item => ({
        ...item,
        infectionRate: Math.max(5, Math.min(25, item.infectionRate + (Math.random() - 0.5) * 2)),
        treatmentSuccess: Math.max(75, Math.min(95, item.treatmentSuccess + (Math.random() - 0.5) * 2))
      })));
    }, 3000);

    return () => clearInterval(interval);
  }, []);

  // Pie chart data
  const pieData = [
    { name: 'Healthy', value: dashboardData.fieldStats.healthy, color: '#10B981' },
    { name: 'At Risk', value: dashboardData.fieldStats.atRisk, color: '#F59E0B' },
    { name: 'Critical', value: dashboardData.fieldStats.critical, color: '#EF4444' }
  ];

  const filteredPlants = plantDatabase.filter(plant =>
    plant.crop.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const StatCard = ({ title, value, unit, icon: Icon, color }) => (
    <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-100 hover:shadow-xl transition-all duration-300">
      <div className="flex items-center justify-between">
        <div>
          <p className="text-gray-600 text-sm font-medium">{title}</p>
          <p className="text-3xl font-bold text-gray-800 mt-2">
            {value}<span className="text-lg text-gray-500 ml-1">{unit}</span>
          </p>
        </div>
        <div className={`p-3 rounded-full ${color}`}>
          <Icon className="w-6 h-6 text-white" />
        </div>
      </div>
    </div>
  );

  const renderDashboard = () => (
    <div className="space-y-6">
      {/* Field Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <StatCard
          title="Total Plants"
          value={dashboardData.fieldStats.totalPlants.toLocaleString()}
          icon={Sprout}
          color="bg-blue-500"
        />
        <StatCard
          title="Healthy Plants"
          value={dashboardData.fieldStats.healthy.toLocaleString()}
          icon={CheckCircle}
          color="bg-green-500"
        />
        <StatCard
          title="At Risk"
          value={dashboardData.fieldStats.atRisk.toLocaleString()}
          icon={AlertTriangle}
          color="bg-yellow-500"
        />
        <StatCard
          title="Critical"
          value={dashboardData.fieldStats.critical.toLocaleString()}
          icon={Zap}
          color="bg-red-500"
        />
      </div>

      {/* Charts Row */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Infection Level Overview */}
        <div className="bg-white rounded-xl p-6 shadow-lg">
          <h3 className="text-xl font-bold text-gray-800 mb-4">Plant Health Overview</h3>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={pieData}
                  cx="50%"
                  cy="50%"
                  innerRadius={60}
                  outerRadius={100}
                  paddingAngle={5}
                  dataKey="value"
                >
                  {pieData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip formatter={(value) => [value.toLocaleString(), '']} />
              </PieChart>
            </ResponsiveContainer>
          </div>
          <div className="flex justify-center space-x-6 mt-4">
            {pieData.map((item, index) => (
              <div key={index} className="flex items-center">
                <div className={`w-3 h-3 rounded-full mr-2`} style={{backgroundColor: item.color}}></div>
                <span className="text-sm text-gray-600">{item.name}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Real-time Trends */}
        <div className="bg-white rounded-xl p-6 shadow-lg">
          <h3 className="text-xl font-bold text-gray-800 mb-4">Infection Trends (7 Days)</h3>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={trendData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#f0f0f0" />
                <XAxis dataKey="day" stroke="#6b7280" />
                <YAxis stroke="#6b7280" />
                <Tooltip />
                <Line 
                  type="monotone" 
                  dataKey="infectionRate" 
                  stroke="#ef4444" 
                  strokeWidth={3}
                  name="Infection Rate (%)"
                />
                <Line 
                  type="monotone" 
                  dataKey="treatmentSuccess" 
                  stroke="#10b981" 
                  strokeWidth={3}
                  name="Treatment Success (%)"
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </div>
      </div>

      {/* Today's Activity */}
      <div className="bg-white rounded-xl p-6 shadow-lg">
        <h3 className="text-xl font-bold text-gray-800 mb-4">Today's Activity</h3>
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="text-center">
            <div className="text-3xl font-bold text-blue-600">{dashboardData.todayActivity.sprayingMissions}</div>
            <div className="text-gray-600 text-sm mt-1">Spraying Missions</div>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold text-green-600">{dashboardData.todayActivity.areaTreated}</div>
            <div className="text-gray-600 text-sm mt-1">Hectares Treated</div>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold text-purple-600">{dashboardData.todayActivity.detectionScans}</div>
            <div className="text-gray-600 text-sm mt-1">Detection Scans</div>
          </div>
          <div className="text-center">
            <div className="text-3xl font-bold text-orange-600">{dashboardData.todayActivity.pesticideUsed}</div>
            <div className="text-gray-600 text-sm mt-1">Litres Used</div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderDroneControl = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-xl p-6 shadow-lg">
        <h3 className="text-xl font-bold text-gray-800 mb-6">Drone Status</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {/* Battery Status */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="font-semibold text-gray-700">Battery Level</span>
              <span className="text-2xl font-bold text-green-600">{Math.round(dashboardData.droneStatus.battery)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-4">
              <div 
                className="bg-green-500 h-4 rounded-full transition-all duration-300"
                style={{width: `${dashboardData.droneStatus.battery}%`}}
              ></div>
            </div>
            <div className="flex items-center space-x-2">
              <Battery className="w-4 h-4 text-green-600" />
              <span className="text-sm text-gray-600">
                {dashboardData.droneStatus.charging ? 'Charging...' : 'Ready for operation'}
              </span>
            </div>
          </div>

          {/* Tank Capacity */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="font-semibold text-gray-700">Pesticide Tank</span>
              <span className="text-2xl font-bold text-blue-600">{dashboardData.droneStatus.tankCapacity}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-4">
              <div 
                className="bg-blue-500 h-4 rounded-full transition-all duration-300"
                style={{width: `${dashboardData.droneStatus.tankCapacity}%`}}
              ></div>
            </div>
            <div className="flex items-center space-x-2">
              <Droplets className="w-4 h-4 text-blue-600" />
              <span className="text-sm text-gray-600">Tank capacity remaining</span>
            </div>
          </div>

          {/* Mission Progress */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="font-semibold text-gray-700">Mission Progress</span>
              <span className="text-2xl font-bold text-purple-600">{Math.round(dashboardData.droneStatus.missionProgress)}%</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-4">
              <div 
                className="bg-purple-500 h-4 rounded-full transition-all duration-300"
                style={{width: `${dashboardData.droneStatus.missionProgress}%`}}
              ></div>
            </div>
            <div className="flex items-center space-x-2">
              <Navigation className="w-4 h-4 text-purple-600" />
              <span className="text-sm text-gray-600">Current mission completion</span>
            </div>
          </div>

          {/* Readiness Status */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="font-semibold text-gray-700">System Status</span>
              <span className={`text-2xl font-bold ${dashboardData.droneStatus.ready ? 'text-green-600' : 'text-red-600'}`}>
                {dashboardData.droneStatus.ready ? 'READY' : 'MAINTENANCE'}
              </span>
            </div>
            <div className="flex items-center space-x-2">
              <CheckCircle className={`w-4 h-4 ${dashboardData.droneStatus.ready ? 'text-green-600' : 'text-red-600'}`} />
              <span className="text-sm text-gray-600">
                {dashboardData.droneStatus.ready ? 'All systems operational' : 'Requires maintenance'}
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white rounded-xl p-6 shadow-lg">
        <h3 className="text-xl font-bold text-gray-800 mb-4">Quick Actions</h3>
        <div className="flex flex-wrap gap-4">
          <button className="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg transition-colors">
            Start Mission
          </button>
          <button className="bg-yellow-500 hover:bg-yellow-600 text-white px-6 py-3 rounded-lg transition-colors">
            Return to Base
          </button>
          <button className="bg-blue-500 hover:bg-blue-600 text-white px-6 py-3 rounded-lg transition-colors">
            Refill Tank
          </button>
          <button className="bg-purple-500 hover:bg-purple-600 text-white px-6 py-3 rounded-lg transition-colors">
            Schedule Maintenance
          </button>
        </div>
      </div>
    </div>
  );

  const renderPlantDatabase = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-xl p-6 shadow-lg">
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-xl font-bold text-gray-800">Plant Database</h3>
          <div className="relative">
            <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Search crops..."
              className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full table-auto">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Crop</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total Count</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Health Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Disease</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Treatment</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredPlants.map((plant) => (
                <tr key={plant.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <span className="text-2xl mr-3">{plant.icon}</span>
                      <span className="font-medium text-gray-900">{plant.crop}</span>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-gray-900 font-medium">
                    {plant.count.toLocaleString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="space-y-1">
                      <div className="flex items-center space-x-2">
                        <span className="w-3 h-3 bg-green-500 rounded-full"></span>
                        <span className="text-sm text-green-700">{plant.healthy} Healthy</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className="w-3 h-3 bg-yellow-500 rounded-full"></span>
                        <span className="text-sm text-yellow-700">{plant.atRisk} At Risk</span>
                      </div>
                      <div className="flex items-center space-x-2">
                        <span className="w-3 h-3 bg-red-500 rounded-full"></span>
                        <span className="text-sm text-red-700">{plant.critical} Critical</span>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="px-2 py-1 text-xs font-semibold bg-red-100 text-red-800 rounded-full">
                      {plant.disease}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="px-2 py-1 text-xs font-semibold bg-blue-100 text-blue-800 rounded-full">
                      {plant.treatment}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderAlerts = () => (
    <div className="space-y-6">
      <div className="bg-white rounded-xl p-6 shadow-lg">
        <h3 className="text-xl font-bold text-gray-800 mb-6">System Alerts</h3>
        <div className="space-y-4">
          {alerts.map((alert) => (
            <div key={alert.id} className={`p-4 rounded-lg border-l-4 ${
              alert.type === 'critical' ? 'border-red-500 bg-red-50' :
              alert.type === 'warning' ? 'border-yellow-500 bg-yellow-50' :
              'border-blue-500 bg-blue-50'
            }`}>
              <div className="flex items-start justify-between">
                <div className="flex items-start space-x-3">
                  {alert.type === 'critical' ? 
                    <AlertTriangle className="w-5 h-5 text-red-500 mt-0.5" /> :
                    alert.type === 'warning' ?
                    <Clock className="w-5 h-5 text-yellow-500 mt-0.5" /> :
                    <CheckCircle className="w-5 h-5 text-blue-500 mt-0.5" />
                  }
                  <div>
                    <p className={`font-medium ${
                      alert.type === 'critical' ? 'text-red-800' :
                      alert.type === 'warning' ? 'text-yellow-800' :
                      'text-blue-800'
                    }`}>
                      {alert.message}
                    </p>
                    <p className="text-sm text-gray-500 mt-1">{alert.time}</p>
                  </div>
                </div>
                <button className="text-gray-400 hover:text-gray-600">
                  ×
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const tabs = [
    { id: 'dashboard', label: 'Dashboard', icon: BarChart3 },
    { id: 'drone', label: 'Drone Control', icon: Navigation },
    { id: 'plants', label: 'Plant Database', icon: Database },
    { id: 'alerts', label: 'Alerts', icon: Bell }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-100 via-green-50 to-blue-100">
      <div className="container mx-auto px-4 py-8 max-w-7xl">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">🌱 Smart Farm Dashboard</h1>
          <p className="text-gray-600">Intelligent Pesticide Management System</p>
        </div>

        {/* Navigation Tabs */}
        <div className="mb-8">
          <div className="flex flex-wrap gap-2 p-1 bg-white rounded-xl shadow-lg">
            {tabs.map((tab) => {
              const IconComponent = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center space-x-2 px-6 py-3 rounded-lg font-medium transition-all duration-200 ${
                    activeTab === tab.id
                      ? 'bg-green-500 text-white shadow-md'
                      : 'text-gray-600 hover:bg-gray-100'
                  }`}
                >
                  <IconComponent className="w-4 h-4" />
                  <span>{tab.label}</span>
                </button>
              );
            })}
          </div>
        </div>

        {/* Content */}
        {activeTab === 'dashboard' && renderDashboard()}
        {activeTab === 'drone' && renderDroneControl()}
        {activeTab === 'plants' && renderPlantDatabase()}
        {activeTab === 'alerts' && renderAlerts()}
      </div>
    </div>
  );
};

export default PesticideManagementDashboard;